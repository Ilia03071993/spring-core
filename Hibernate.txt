    1. В чем основные преимущества Hibernate?
    2. Чем отличается SessionFactory и Session?
    3. За счет чего Hibernate является независимым от СУБД?
    4. Как Hibernate понимает, что нужно генерировать запросы на MySQL?
    5. Какую важную технологию предоставляет Hibernate?
    6. Чем отличается JPA от Hibernate?
    7. Что такое UUID?
    8. Что такое POJO?
    9. Когда нужно использовать стратегию генерации Sequence, когда Identity, когда Table?

1. Hibernate - фреймворк, связыает БД с ООП кодом. Облегчает написание SQL запросов, не привязан как какой либо SQL базе, имеет свой синтаксис который написан на HQL, автоматически переобразуется в SQL БД(MySQL, PostgreSQL и прочие). Выполняет роль посредника между приложением Java и базой данных, использя JDBC. Предоставялет технологию ORM (Object-to-Relational Mapping) – преобразование объекта в строку в таблице и обратно.

2.SessionFactory - это фабрика сессий, которая создает объекты Session. Она является главным интерфейсом для получения сессий в Hibernate.

Session - это интерфейс, который предоставляет JPA(API) для работы с базой данных. Он представляет собой логическую связь между приложением и базой данных, и используется для выполнения операций чтения и записи данных в базу.

SessionFactory создается один раз и далее переиспользуется для создания сессии (подключения к БД).

3.Hibernate - предоставляет обертку над JDBC, поэтому является независимым от поставщика(СУБД).

4. Запросы в hibrenate пишутся на языке HQL, который автоматически преобразуется в SQL (MySQL, PostgreSQL и прочие).

5.Hibernate является фреймворком, предоставляющим технологию ORM (Object Relational Mapping) - автоматическое преобразование Java-объекта в строку в таблице и наоборот – строки таблицы в Java-объект.

6.JPA (Java/Jakarta persistence API) – спецификация, которая описывает правила и принципы работы ORM (как ORM должна сохранять объекты и т.д.). Hibernate – конкретная реализация JPA.

7. UUID (Universally Unique Identifier) - это 128-битный идентификатор, который гарантирует уникальность в пределах всей системы. Он может быть использован для идентификации объектов в базе данных, для генерации случайных ключей и т.д. UUID может быть представлен в виде шестнадцатеричной строки или в виде 36-символьной строки, содержащей дефисы.

8.Объект Entity является объектом стандартного Java класса (POJO, Plain-Old-Java-Object)
POJO класс – класс, содержащий только private поля, геттеры, сеттеры, конструкторы, toString, equals, hashCode.
В POJO классе не пишется никакая логика приложения.

9.@GeneratedValue описывает стратегию по генерации значений для столбца PK. Существует несколько стратегий:
- IDENTITY полагается на генерацию значений согласно правилам БД (наиболее верная для MySQL);
- SEQUENCE полагается на работу Sequence, созданного в БД;
- Стратегия типа TABLE содержит дополнительную таблицу с постоянно увеличивающимся значением поля (id), является устаревшим;